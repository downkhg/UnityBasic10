0.용어정리
-에셋: 자산? 프로젝트내에서 사용할수 있는 리소스나 코드와 같은 기능을 제공하는것.
-타일맵: 타일처럼 나누어진 리소르를 조합하여 맵을 구성하는것.
-게임오브젝트: 씬안에 존재하는 모든 대상.
-컴포넌트: 게임오브젝트에 필요한 기능을 추가할때 사용함.
-트랜스폼: 이동관련된 기능을 당담하는 컴포넌트.
-RigidBody(강체:힘을받는대상): 중력(물리)을 추가하는 컴포넌트.
-Collider: 부딧히는 영역을 설정해주는 컴포넌트

※카메라가 삭제되었을때 만드는 방법.
 상단메뉴 > GameObject > Camera > 
 생성된 카메라 선택 > Camera컴포넌트에 Projection > Orthogaphic 선택 > z축을 -10을 넣는다.

1. 리소스 받기 
   에셋스토어 탭이 없다면? 상단매뉴>Window>AssetStore 클릭
   에셋스토어 탭>도킹해제하고 최대화>2D>FreeAsset>SunnyLand>Import
   
2. 맵제작하기
   타일맵생성 상단매뉴>GameObject>2DObejct>TileMap > "Grid" 생성됨.
   Grid > CellSize를 사용할 타일 크기에 맞춘다.
   타일팔레트 상단매뉴>Window>2D>TilePalette> 오른쪽 인스펙터 창에 도킹하기
   TilePalette>Create New Pallette> 팔레트관련 에셋을 저장할 폴더를 생성하고, 해당폴더를 선택한다.
   Tilleset텍스처에서 원하는 타일을 팔레트안에 드레그엔드롭한다. (저장할때 위 생성폴더를 이용할것)
   팔레트에서 원하는 타일을 선택(스포이드)하고, 타일맵안에 칠(붓)한다.
   타일맵만들기: https://www.youtube.com/watch?v=dtpthaIYa8g
   
3. 플레이어 생성
   움직여한다. -> 플레이어를 에셋에서 추가하고 이동시켜본다. 
   -> 왼쪽상단  > 무브툴을 선택하고, 마우스로 잡아 끌어 움직여본다. 
   -> Transform에 position 값이 변경된다. -> 잡은 축에 따라 값이 변경된다.
   -> 중력 -> RigidBody 추가 > 중력만 작용하고, 부딧히지않는다.
   -> 충돌 -> Collider 추가 > 바닥도 충돌해야하므로 TileMapCollider
   ->점프? 위로 힘을 가함. -> 다중점프가 일어남.
   ->현실에서는 발판이 있어야만 점프가능 -> ?
   
4. 플랫포머(통과가능한 발판) 만들기
   -> 각 객체가 별계로 충돌이 가능한 박스 생성하기 -> 경우에 따라 파괴도 가능함
   1. 점프 > 착지 
   2. 점프 > 이동 > 점프 > 플레이어가 올라갔을때 타일맵으로 사용, 파괴시 일반 블럭으로 사용.
   3. 게임오브젝트선택 >다중선택(shift+마지막 오브젝트 클릭,ctrl+각 게임오브젝트)> 
	  AddComponet > Physics2D > PlatformEffector2D 추가 > Collider2d > UsebyEffector체크   
   
문제1) 다단점프 만들어보기 -> 참과 거짓 -> 횟수 -> int
문제2) 플랫폼을 통과한 이후 다단 점프가 발생 -> 플랫폼도 땅이므로 닿으면 점프가 초기화된다.
     ->플랫폼은 땅으로 취급하지않기 -> 플랫폼위에서 점프가 불가능한 현상 발생 > 일반적인 방법으로 해결이 어렵다.
	 
5.아이템
  -> 점수오르는 아이템 만들기  -> 아이템을 먹는다. -> (아이템:게임오브젝트)에 (부딧히면 점수를 획득 사라진다)한다.
  
문제3) 보석도 아이템 만들기(보석은 점수가 더 높게 만들기)
1. 태그나 이름을 추가하여 아이템종류를 구별하는것. 
 ->아이템의 종류가 늘어날수록 관리해야하는 태그나 이름이 늘어남.
2. 아이템에 스크립트를 추가하고, 점수를 부여하여, 부여된 점수에 따라,
 ->오브젝트에 스크립트를 추가하고 인스펙터 상의 내용을 변경하여, 점수의 차이점을 준다.

6.사다리 타기
  -> 사다리에 도착하면 방향키룰 눌러 올라갈수있다.
  1)사다리에 들어가면, 사다리상태로 변경한다.
  2)사다리 상태로 들어가면 중력을 제거하고, 위, 아래로 키를 활성화한다.
  3)사다리에서 나가면, 중력을 원래대로 돌린다.
  4)사다리에 타일마다 콜라이더가 적용되어있으면, 이동하면서 Enter/Exit가 발생한다.
    그러므로, 타일맵콜라이더를 이용하여 콜라이더를 통합시킨다.
  5)플레이어의 콜라이더가 너무크면 사다리를 올라가다가 예외가 발생한다.
    콜라이더의 크기를 타일보다 약간 작게 만들자.

7.주머니쥐 만들기
1) 앞으로 돌진한다.
2) 플레어어가 닿으면 플레이어 죽는다.

※스프라이트 나누기
1)텍스쳐 선택 > 인스펙터 > 스프라이트모드:멀티플 > 스프레이트 에디터버튼 클릭
2)상단윗쪽 슬라이스>기본설정값>슬라이스버튼 클릭

8.총쏘기
1) (총): 조준해서 (총알:게임오브젝트) (발사:총구방향으로 날아간다)한다.
2) 슬라이스된 이미지를 크기 및 색상을 변경해서 총처럼 보이게한다. 
   플레이어의 자식오브젝트로 만들어 같이 이동하도록 만든다.
   적절한 이미지를 골라서 총알로 만든다.

문제4) 총알이 총구에서 날아가도록 만들기.
-총알은 어디에서 날아가는가 > 총구 > 총.
-복제된 총알의 위치를 총의 위치로 변경한다.

3) 총알이 닿으면 삭제되도록 만들기 - 총알에 콜라이더엔터를 추가한다.
   총알이 플레이어닿아도 삭제됨. 플레이어가 아닐때만 삭제되도록 만듦. != : 다르다.
   총알이 삭제되지않도록, 프리팹을 만듦.
   일반적은 총알이되록 중력을 제거하고, 트리거화한다.
   
9. 플레이어 부활 시키기-(플레이어,몬스터:오브젝트)가 (죽었을때:삭제되었을때) (플레이어:Instantiate)를 다시 생성한다.

문제5) 몬스터 부활 시키기
-플레이어의 리스포너에서 부활대상과 죽을 대상을 몬스터로 변경하기
문제6) 플레이어나 몬스터가 (떨어지면: 일정 y축 이하로 내려감, 바닥밑에 콜라이더이용) (죽게:삭제) 만들기
-일정축 이하로 내려감: 각 오브젝트마다 해당 알고리즘을 처리해야함., 만약 바닥이 -5이하가 되면 문제가 발생한다. 가볍다(연산량이 매우적다.)
-바닥에 떨어져 감지되면 삭제: 바닥에 따로 오브젝트를 생성하고 콜라이더를 이용함. 바닥의 크기에 따라서 맵이 커지면 크기가 변경되야한다. 무겁다(컴퓨터의 연산량이 많다)

10. 독수리 만들기
1. 독수리는 플레이어를 (추적:대상을 쫓아간다)한다.
1.1. 추적? (대상:플레이어)을 (따라간다:플레이어가 있는 방향으로 이동).
1.2. 대상이 있는방향: 대상위치 - 독수리위치 = 대상과 독수리 사이거리(스칼라)와 방향(평준화).
1.3. 1.2에서 구한 평준화된 값을 방향값으로 독수리를 이동시킨다.
2. 독수리가 덜덜 떨게됨.(플레이어의 정확한 위치로 이동이 불가능하기때문에 계속 이동하는 현상
2.1. 이동할 위치에 오차범위를 설정한다.
2.2. 1.2에서 계산된 스칼라값을 이용하여 이값이 프레임당시간보다 작은 경우 이동을하지않도록 만듦.
독수리가 떨게되는 이유: https://docs.google.com/drawings/d/1BWiU56MGVRu3te75eH_qLuL9KYnd1D5p1RfuKyCYDSY/edit?usp=sharing
3. 대상을 지정하기 위해서 시야가 필요함.
3.1. 시야? 눈에 보임. 반경내에 존재함. -> 서클콜라이더 -> 트리거화 
3.2. 대상이 시야안에 들어오면 타겟으로 지정. -> 아무 대상이나 쫓아감.
3.3. 독수리에 타겟이 없으면 오류발생 -> 추적할대상이 없으면 추적할 위치를 확인할수없음. -> 대상이 없을때 추적하지않도록 하기
3.4. 총알이 시야범위에 안맞아도 독수리가 죽는다. 
3.4.1.트리거와 콜라이더를 이용한 충돌은 해당 상황의 발생을 막을수가 없음. -> 총알에서 부딧힌 범위가 트리거인지 확인할수없음.
3.4.2.Overlap과 FixedUpdate와 Layer

문제7) 콜라이더와 Overlap의 차이는 무엇인가?
콜라이더: 물리연산 및 기본생명주기 함수들에서 충돌체크를 사용하는 것.
Overlap: 물리연산과 상관없이 언제든지 충돌범위를 지정하여 충돌된 대상을 가져오는것.
오버랩은 3자입장에서 처리하므로 오브젝트의 존재여부와 상관없이 충돌체크가 언제든 가능하다.
단, 특정객체라는것이 존재하지않으므로 자기자신이라는 개념이 존재하지않는 3인칭이다.

문제8) Tag와 레이어의 차이는 무엇인가?
태그: 이름을 대신하여 특정 분류를 하거나 구별을 하기위한 다른 이름.
레이어: 대상을 그룹으로 묶어서 충돌처리할때 특정대상을 구별하기 위해서 사용된다.
레이어를 사용하면 충돌체크시 연산량을 줄 일 수 있다.

레이어와충돌체크: https://docs.google.com/drawings/d/1HsiTPKzq6DY3pELzS4tepf6RBdUO60yCJPD1ZUYdKIo/edit?usp=sharing

11. 독수리가 플레이어를 공격하고 총알에 맞으면 죽게 만들기
11.1. 주머니쥐에서 했던 부분을 참조하여 독수리에 맞게 변경하기
11.2. 독수리는 부딧히지않는다 -> 트리거화
11.3. 트리거에서 충돌된 대상이 총알이면 자신이 삭제되고, 플레이어면 플레이어를 삭제한다.

문제9) 독수리 부활하게 만들기
5. 플레이어가 죽으면 독수리의 부활위치로 돌아가게 만들기
5.1. 독수리가 부활하는 위치를 알수있도록 변수추가하고 부활위치 등록하기

문제10) 카메라가 독수리 처럼 자연스럽게 따라다니게 만들기
1.플레이어의 위치에다 카메라의 위치로 변경하도록 만듦. -> 자연스럽지않다.
1.1. 플레이어 위치와 카메라위치를 그대로 변경하기 -> 순간이동해서 어색할때가 많음.
1.2. 독수리처럼 추적하도록 만들기 -> 문제는 없으나 카메라 속도가 빨라지면 위치가 정확하게 찾기 어려움.
1.3. Lerp나 Slerp를 이용하여 추적하게 만들기 -> 부드러우나 속도가 일정하게 변하지않는다.

12. 독수리가 정찰 하게 만들기
12.1.1 정찰? 현재위치에서 다른 위치로 오가는 것.A->B->A->B
12.1.2 A위치에 도착하면 B로 이동하고, B에 도착하면  A로 이동 -> A위치에 근접하면, 타겟을 B로 변경, B위치에 접근하면 타겟을 A로 변경
12.1.3. 독수리가 이동을 중단하면 도착 -> 이동중:도착X,정지:도착O
12.1.4. A위치에 목표일때 움직이지않으면 목표를 B로 변경, 목표가 B위치 이동하지않으면 A로 목표를 변경한다.

13. RPG요소 추가하기
13.1. 플레이어 능력치(공격력,체력) 및 랩업(경험치,레벨)가능한 클래스(Player) 제작.
13.2. 플레이어클래스를 각 몬스터와 플레이어에게 부여함. -> 공격은 되나 충돌되어 밀어냄 
   -> 레이어를 이용하여 충돌검사 방지 -> 공격불가 -> 오버랩을 이용한 데미치 주기 
   -> 데미지가 매 프레임마다 들어감. -> 무적모드 필요
13.3. 무적모드 추가하기
13.3.1. 무적? 아무런 공격을 받지않는 상태, 타겟팅이 안됨X, 공격을 받지만 데지미를 받지않음O.
   3.2. (일정시간)동안 무적이 유지된다.
   3.3. 무적상태가 아닐때 공격받으면 공격후 무적상태로 변경하고, 무적상태라면 데미지를 주지않도록한다.
13.4. 총알에 맞으면 데미지를 입는다.
